# implementation of card game - Memory

import simplegui
import random
a=[0,1,2,3,4,5,6,7]
b=[0,1,2,3,4,5,6,7]
ab=a+b
random.shuffle(ab)
state=0
ab_pos=[]
for j in range(0,751,50):
    ab_pos.append(j)
#print ab_pos

mouse_pos=[10000,100000]
mouse_pos_2=[10000,100000]
tr=0
li_2=[]
z=0
y=1
di={}
li=[]


exposed=[False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False]
# helper function to initialize globals
def new_game():
    global state
    state=0
    global z,y,tr
    z=0
    y=1
    global li,li_2,ab,a,b
    global mouse_pos,mouse_pos_2
    mouse_pos=[10000,100000]
    mouse_pos_2=[10000,100000]
    random.shuffle(ab)
    li_2=[]
    li=[]
    tr=0
    label.set_text("Turns = "+str(tr))
      

     
# define event handlers
def gus_corr(mp):
    q=True
    for u in range(0,len(li_2)):
        if mp in range(ab_pos[li_2[u][1]],ab_pos[li_2[u][1]]+51) or mp in range(ab_pos[li_2[u][3]],ab_pos[li_2[u][3]]+51):
            return False
    return q    








def mouseclick(pos):
    # add game state logic here
    global mouse_pos,mouse_pos_2
    global tr
    global exposed
    global z,y
    global li,li_2
   
    global state
    mouse_pos_0=list(pos)
    
    if state == 0:
        state = 1
        mouse_pos=list(pos)
        label.set_text("Turns = "+str(tr))
    elif state == 1:
        
        if mouse_pos_0[0] not in range(ab_pos[z],ab_pos[z]+51) and gus_corr(mouse_pos_0[0])==True:
            
        
            state = 2
            mouse_pos_2=list(pos)
            tr=tr+1
            label.set_text("Turns = "+str(tr))
    else:
        if mouse_pos_0[0] not in range(ab_pos[z],ab_pos[z]+51) and mouse_pos_0[0] not in range(ab_pos[y],ab_pos[y]+51) and gus_corr(mouse_pos_0[0])==True:
            state = 1
            mouse_pos=list(pos)
            label.set_text("Turns = "+str(tr))
    
                        
# cards are logically 50x100 pixels in size    
def draw(canvas):
    global mouse_pos
    global state
    global tr
    global exposed
    global li_2
    global z,y
    global li
    global li_2
    for i in range(0,751,50):
        canvas.draw_polygon([(i,0),(i+50,0),(i+50,100),(i,100)],1,"red","yellow")
        
    for b in  range(ab_pos[0],len(ab_pos)):
        if mouse_pos[0] in range(ab_pos[b],ab_pos[b]+51):
                z=b
                if b!=len(ab_pos)-1:
                    canvas.draw_text(str(ab[b]),((ab_pos[b]+ab_pos[b+1])//2,50),25,"red")
                else:
                    canvas.draw_text(str(ab[b]),(775,50),25,"red")
                
    if state==2:
        #tr=tr+1
        
        for h in  range(ab_pos[0],len(ab_pos)):
            if mouse_pos_2[0] in range(ab_pos[h],ab_pos[h]+51):
                y=h
                if h!=len(ab_pos)-1:
                    canvas.draw_text(str(ab[h]),((ab_pos[h]+ab_pos[h+1])//2,50),25,"red")
                else:
                    canvas.draw_text(str(ab[h]),(775,50),25,"red")
        #exposed[h]=True 
        if ab[z]==ab[y]:
            
            li=[ab[z],z,ab[y],y]
            li_2.append(li)
        for i in range(0,len(li_2)):
                    for j in range(0,4):
                        if li_2[i][1]!=len(ab_pos)-1:
                            canvas.draw_text(str(li_2[i][0]),((ab_pos[li_2[i][1]]+ab_pos[li_2[i][1]+1])//2,50),25,"blue")
                        else:
                            canvas.draw_text(str(ab[li_2[i][1]]),(775,50),25,"blue")
                        
                        if li_2[i][3]!=len(ab_pos)-1:
                            canvas.draw_text(str(li_2[i][2]),((ab_pos[li_2[i][3]]+ab_pos[li_2[i][3]+1])//2,50),25,"blue")
                        else:
                            canvas.draw_text(str(ab[li_2[i][3]]),(775,50),25,"blue")    
                        
                    #canvas.draw_text(str(li_2[i][2]),((ab_pos[li_2[i][3]]+ab_pos[li_2[i][3]+1])//2,50),25,"blue")
                
    for i in range(0,len(li_2)):
                    for j in range(0,4):
                        if li_2[i][1]!=len(ab_pos)-1:
                            canvas.draw_text(str(li_2[i][0]),((ab_pos[li_2[i][1]]+ab_pos[li_2[i][1]+1])//2,50),25,"blue")
                        else:
                            canvas.draw_text(str(ab[li_2[i][1]]),(775,50),25,"blue")
                        
                        if li_2[i][3]!=len(ab_pos)-1:
                            canvas.draw_text(str(li_2[i][2]),((ab_pos[li_2[i][3]]+ab_pos[li_2[i][3]+1])//2,50),25,"blue")
                        else:
                            canvas.draw_text(str(ab[li_2[i][3]]),(775,50),25,"blue")           
            
        

# create frame and add a button and labels
frame = simplegui.create_frame("Memory", 800, 100)
frame.add_button("Restart", new_game)
label = frame.add_label("Turns = ")
label.set_text("Turns = "+str(tr))

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()
